stages:
  - build
  - test
  - deploy
  - release

variables:
  PACKAGE_VERSION: "$CI_COMMIT_TAG"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/dist/${PACKAGE_VERSION}"

#before_script:
#  - export PACKAGE_FILE="${CI_PROJECT_NAME}-"$( python setup.py --version )".tar.gz"

build_sdist:
  image: python:latest
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - python setup.py sdist
  artifacts:
    paths:
      - dist

test_latest:
  image: python:latest
  stage: test
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - pip install tox numpy pandas flake8
    - tox


dploy_pages:
  image: python:latest
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - pip install numpy pandas
    - pip install sphinx
    - python setup.py build_sphinx
    - mv build/sphinx/html/ public/
  artifacts:
    paths:
    - public

deploy_upload:
  stage: deploy
  image: python:latest # curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]*\.[0-9]*\.[0-9]*.*/  # Run if tah is v0.00.00...
  script:
    - apt install curl
    - export PACKAGE_FILE=$( ls dist/ )
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file dist/${PACKAGE_FILE} "${PACKAGE_REGISTRY_URL}/${PACKAGE_FILE}"
    - mkdir cache
    - echo "${PACKAGE_FILE}" > cache/PACKAGE_FILE
  artifacts:
    paths:
    - cache

release_release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]*\.[0-9]*\.[0-9]*.*/  # Run if tah is v0.00.00...
  script:
    - echo "Running the release job."
    - export PACKAGE_FILE=$( cat cache/PACKAGE_FILE )
  release:      # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: "$PACKAGE_VERSION"
    description: "$CI_COMMIT_TAG"
    assets:
      links:
      - name: "Python install package: ${PACKAGE_FILE}"
        url: "${PACKAGE_REGISTRY_URL}/${PACKAGE_FILE}"
        link_type: package
